import serial
import threading
import time
import subprocess
import sys
from flask import Flask, render_template
from flask_socketio import SocketIO

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*")

ser = None
serial_thread = None
camera_process = None

def capture_camera_output():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç main.py –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –≤—ã–≤–æ–¥"""
    global camera_process
    
    try:
        camera_process = subprocess.Popen(
            [sys.executable, 'main.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        socketio.emit('camera_log', 'üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞–∑–±—É–∫–∏ –ú–æ—Ä–∑–µ...')
        
        for line in iter(camera_process.stdout.readline, ''):
            if line.strip():
                socketio.emit('camera_log', line.strip())
                
        camera_process.stdout.close()
        return_code = camera_process.wait()
        
        if return_code:
            socketio.emit('camera_log', f'‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {return_code}')
            
    except Exception as e:
        socketio.emit('camera_log', f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ main.py: {str(e)}')

def init_serial(port='/dev/ttyUSB0', baudrate=9600):
    global ser
    try:
        ser = serial.Serial(port, baudrate, timeout=1)
        socketio.emit('com_data', f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port} –Ω–∞ {baudrate} –±–æ–¥')
        return True
    except Exception as e:
        socketio.emit('com_data', f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}')
        return False

def serial_reader():
    """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
    while ser and ser.is_open:
        try:
            if ser.in_waiting > 0:
                data = ser.readline().decode('utf-8').strip()
                if data:
                    socketio.emit('com_data', f'ESP32: {data}')
        except Exception as e:
            socketio.emit('com_data', f'‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}')
            break

@app.route('/')
def index():
    return render_template('index.html')

@socketio.on('com_command')
def handle_com_command(command):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç"""
    global ser
    if ser and ser.is_open:
        try:
            ser.write((command + '\r\n').encode())
            socketio.emit('com_data', f'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {command}')
        except Exception as e:
            socketio.emit('com_data', f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}')
    else:
        socketio.emit('com_data', '‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç')

@socketio.on('start_camera')
def handle_start_camera():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–∞–º–µ—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    socketio.emit('camera_log', 'üé• –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–∞–º–µ—Ä—ã...')
    camera_thread = threading.Thread(target=capture_camera_output, daemon=True)
    camera_thread.start()

@socketio.on('connect')
def handle_connect():
    print('Client connected')

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

if __name__ == '__main__':
    if init_serial(port='/dev/ttyUSB0'):
        serial_thread = threading.Thread(target=serial_reader, daemon=True)
        serial_thread.start()
    
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)