import serial
import threading
import time
import subprocess
import sys
from flask import Flask, render_template
from flask_socketio import SocketIO
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*")

serial_ports = {
    0: {'ser': None, 'thread': None, 'port': '/dev/ttyUSB0'},
    1: {'ser': None, 'thread': None, 'port': '/dev/ttyUSB1'}
}

camera_process = None

def log_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"""

def capture_camera_output():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç main.py –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –≤—ã–≤–æ–¥"""
    global camera_process
    
    try:
        camera_process = subprocess.Popen(
            [sys.executable, 'main.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        socketio.emit('camera_log', 'üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞–∑–±—É–∫–∏ –ú–æ—Ä–∑–µ...')
        
        for line in iter(camera_process.stdout.readline, ''):
            if line.strip():
                socketio.emit('camera_log', line.strip())
                
        camera_process.stdout.close()
        return_code = camera_process.wait()
        
        if return_code:
            socketio.emit('camera_log', f'‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {return_code}')
            
    except Exception as e:
        socketio.emit('camera_log', f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ main.py: {str(e)}')

def init_serial(port_number):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
    port_config = serial_ports[port_number]
    
    if not os.path.exists(port_config['port']):
        log_message(f"–ü–æ—Ä—Ç {port_config['port']} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return False
    
    log_message(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {port_config['port']}...")
    
    try:
        port_config['ser'] = serial.Serial(
            port=port_config['port'], 
            baudrate=9600, 
            timeout=1,
            bytesize=serial.EIGHTBITS,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE
        )
        
        time.sleep(2)
        
        port_config['ser'].reset_input_buffer()
        port_config['ser'].reset_output_buffer()
        
        log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port_config['port']}")
        log_message(f"–ü–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç: {port_config['ser'].is_open}")
        log_message(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {port_config['ser'].get_settings()}")
        
        return True
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {port_config['port']}: {str(e)}")
        return False

def serial_reader(port_number):
    """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
    port_config = serial_ports[port_number]    
    buffer = ""
    
    while port_config['ser'] and port_config['ser'].is_open:
        try:
            in_waiting = port_config['ser'].in_waiting
            if in_waiting > 0:
                raw_data = port_config['ser'].read(in_waiting)
                try:
                    chunk = raw_data.decode('utf-8', errors='ignore')
                    buffer += chunk
                    
                    while '\n' in buffer:
                        line, buffer = buffer.split('\n', 1)
                        line = line.strip()
                        
                        if '\r' in line:
                            line = line.replace('\r', '')
                            
                        if line:
                            socketio.emit('com_data', {
                                'port': port_number, 
                                'message': f'üé® {line}'
                            })
                            
                except Exception as decode_error:
                    print(f"[DEBUG] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {decode_error}")
            
            time.sleep(0.1)
            
        except Exception as e:
            print(f"[DEBUG] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ {port_number}: {str(e)}")
            socketio.emit('com_data', {
                'port': port_number, 
                'message': f'‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)}'
            })
            break

def test_serial_ports():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
    log_message("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–†–¢–û–í ===")
    
    import glob
    available_ports = glob.glob('/dev/ttyUSB*') + glob.glob('/dev/ttyACM*')
    log_message(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ: {available_ports}")
    
    for port_number, config in serial_ports.items():
        log_message(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {port_number}: {config['port']}")
        if os.path.exists(config['port']):
            log_message(f"‚úÖ –ü–æ—Ä—Ç {config['port']} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            log_message(f"‚ùå –ü–æ—Ä—Ç {config['port']} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

@app.route('/')
def index():
    return render_template('index.html')

@socketio.on('com_command')
def handle_com_command(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç"""
    port_number = data.get('port', 0)
    command = data.get('command', '')
    
    log_message(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ {port_number}: '{command}'")
    
    port_config = serial_ports.get(port_number)
    if port_config and port_config['ser'] and port_config['ser'].is_open:
        try:
            port_config['ser'].write((command + '\n').encode())
            log_message(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ—Ä—Ç {port_number}")
            socketio.emit('com_data', {
                'port': port_number, 
                'message': f'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {command}'
            })
        except Exception as e:
            log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            socketio.emit('com_data', {
                'port': port_number, 
                'message': f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'
            })
    else:
        log_message(f"–ü–æ—Ä—Ç {port_number} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        socketio.emit('com_data', {
            'port': port_number, 
            'message': f'‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç'
        })

@socketio.on('start_camera')
def handle_start_camera():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–∞–º–µ—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    socketio.emit('camera_log', 'üé• –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–∞–º–µ—Ä—ã...')
    camera_thread = threading.Thread(target=capture_camera_output, daemon=True)
    camera_thread.start()

@socketio.on('manual_test')
def handle_manual_test(data):
    """–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤"""
    port_number = data.get('port', 0)
    log_message(f"–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –ø–æ—Ä—Ç–∞ {port_number}")
    
    port_config = serial_ports.get(port_number)
    if port_config and port_config['ser']:
        log_message(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç–∞ {port_number}: –æ—Ç–∫—Ä—ã—Ç={port_config['ser'].is_open}")
        log_message(f"–ë–∞–π—Ç –≤ –±—É—Ñ–µ—Ä–µ: {port_config['ser'].in_waiting}")
    else:
        log_message(f"–ü–æ—Ä—Ç {port_number} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

@socketio.on('connect')
def handle_connect():
    log_message("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è")

@socketio.on('disconnect')
def handle_disconnect():
    log_message("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")

if __name__ == '__main__':
    test_serial_ports()
    
    for port_number in serial_ports.keys():
        if init_serial(port_number):
            serial_thread = threading.Thread(
                target=serial_reader, 
                args=(port_number,), 
                daemon=True
            )
            serial_thread.start()
            serial_ports[port_number]['thread'] = serial_thread
        else:
            log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç {port_number}")
    
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)